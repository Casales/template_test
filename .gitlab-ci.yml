#######################################################################################################
# List of stages for jobs, and their order of execution                                               #
#######################################################################################################
stages:
  - code_quality
  - build
  - upload
  - release
#######################################################################################################

#######################################################################################################
# List of variables used in the pipeline                                                              #
#######################################################################################################
variables:
  PROJECT_NAME: template_test
  PACKAGE_REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/binaries/${CI_COMMIT_TAG} #the registry url is used for uploads
  LOCAL_ARTIFACTS_PATH: ./.gitlab/artifacts # this is the path where the local scripts store the results (binaries, test results, etc)
  FIRMWARE_HEX_PATH: ${LOCAL_ARTIFACTS_PATH}/${PROJECT_NAME}.hex # every artifact needs a local path..
  FIRMWARE_HEX_URL:  ${PACKAGE_REGISTRY_URL}/${PROJECT_NAME}_v${CI_COMMIT_TAG}.hex # ..and a url path to store it in the GitLab registry for releases
#######################################################################################################

#######################################################################################################
# This job runs in the code_quality stage and will generate a report about the code quality           #
#######################################################################################################
include:
  - template: Code-Quality.gitlab-ci.yml #we use the code-climate tool, which can be finetuned by adding a .codeclimate.yml file to the root folder
code_quality:
  stage: code_quality
  services: # Shut off Docker-in-Docker
  tags:
    - docker
  rules:
    - if: '($CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_TAG)' # only start code quality on commits or testruns (run pipeline from web)
  artifacts:
    expire_in: never
    paths: 
      - gl-code-quality-report.json
code_quality_html:
  extends: code_quality
  variables:
    REPORT_FORMAT: html
  needs:
    - code_quality
  artifacts:
    expire_in: never
    paths: 
      - gl-code-quality-report.html
#######################################################################################################

#######################################################################################################
# This job runs in the build stage and will generate the firmware hex file                            #
#######################################################################################################
firmware-build-job:
  stage: build
  tags:
    - firmware-build
  script:
    - .\scripts\build.bat
  artifacts:
    paths:
    - ${FIRMWARE_HEX_PATH}
#######################################################################################################

#######################################################################################################
# This job runs in the upload stage, and will upload the hex file to the gitlab package registry      #
#######################################################################################################
upload-job:
  stage: upload  # It only runs when *both* jobs in the test stages complete successfully.
  tags:
    - docker
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG # upload is only done for tagged commits
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${FIRMWARE_HEX_PATH} "${FIRMWARE_HEX_URL}"'
  needs:
    - job: firmware-build-job
#######################################################################################################

#######################################################################################################
# This job runs in the release stage and will generate a new release with links to the hex file       #
#######################################################################################################
release-job:      # This job runs in the release stage.
  stage: release  # It only starts when the job in the upload stage completes successfully.
  tags:
    - docker
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG # only tagged commits get released
  script:
    - echo "Running the release job."
  needs:
    - job: upload-job
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: |
      Release created using the release-cli. Access release notes by clicking the TAG.
       
      Firmware can be programmed with this command:
      \`\`\`console
      nrfjprog -e
      nrfjprog --program ${PROJECT_NAME}_v${CI_COMMIT_TAG}.hex --verify --reset
      \`\`\`
    assets:
      links:
        - name: '${PROJECT_NAME} v${CI_COMMIT_TAG}'
          url: '${FIRMWARE_HEX_URL}'
#######################################################################################################